{"version":3,"sources":["components/LoginForm/LoginFormSchema.js","API/index.js","components/LoginForm/index.js","pages/Home.js","components/RegisterForm/RegisterFormSchema.js","components/RegisterForm/index.js","pages/Register.js","App.js","serviceWorker.js","index.js"],"names":["userLoginSchema","yup","shape","email","required","password","registerUser","newUser","a","console","log","axios","post","data","loginUser","user","token","this","setToken","localStorage","setItem","LoginForm","initialValues","validationSchema","onSubmit","values","setSubmitting","API","isSubmitting","type","name","component","disabled","Home","UserSchema","RegisterForm","props","registerFormSchema","setUser","Register","App","useState","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ea4b3060.chunk.js","sourcesContent":["import * as yup from 'yup';\r\n\r\nconst userLoginSchema = yup.object().shape({\r\n  email: yup.string().email().required(),\r\n  password: yup.string().required(),\r\n});\r\n\r\nexport default userLoginSchema;\r\n","import axios from 'axios';\r\nexport default {\r\n  registerUser: async (newUser) => {\r\n    console.log('inside register');\r\n    const { data } = await axios.post('/signup', newUser);\r\n    return data;\r\n  },\r\n  loginUser: async function (user) {\r\n    console.log(user);\r\n    console.log('inside login');\r\n    const {\r\n      data: { token },\r\n    } = await axios.post('/login', user);\r\n    this.setToken(token);\r\n    axios.post('/login', user);\r\n  },\r\n  setToken: (token) => {\r\n    return localStorage.setItem('token', token);\r\n  },\r\n};\r\n","import React from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport userLoginSchema from './LoginFormSchema';\r\nimport API from '../../API';\r\n\r\nfunction LoginForm() {\r\n  return (\r\n    <div>\r\n      <Formik\r\n        initialValues={{ email: '', password: '' }}\r\n        validationSchema={userLoginSchema}\r\n        onSubmit={async (values, { setSubmitting }) => {\r\n          try {\r\n            API.loginUser(values);\r\n          } catch (error) {\r\n            if (error) throw error;\r\n          }\r\n        }}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <Field type=\"email\" name=\"email\" />\r\n\r\n            <ErrorMessage name=\"email\" component=\"div\" />\r\n\r\n            <Field type=\"password\" name=\"password\" />\r\n\r\n            <ErrorMessage name=\"password\" component=\"div\" />\r\n\r\n            <button type=\"submit\" disabled={isSubmitting}>\r\n              Submit\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\nimport LoginForm from '../components/LoginForm';\r\n\r\nfunction Home() {\r\n  return (\r\n    <div>\r\n      <LoginForm />\r\n    </div>\r\n  );\r\n}\r\nexport default Home;\r\n","import * as yup from 'yup';\r\n\r\nconst UserSchema = yup.object().shape({\r\n  email: yup.string().email().required(),\r\n  password: yup.string().required(),\r\n});\r\n\r\nexport default UserSchema;\r\n","import React from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport registerFormSchema from './RegisterFormSchema';\r\nimport API from '../../API';\r\n\r\nfunction RegisterForm(props) {\r\n  return (\r\n    <div>\r\n      <Formik\r\n        initialValues={{ email: '', password: '' }}\r\n        validationSchema={registerFormSchema}\r\n        onSubmit={async (values, { setSubmitting }) => {\r\n          try {\r\n            const { user } = await API.registerUser(values);\r\n            API.loginUser(values);\r\n            props.setUser(user);\r\n          } catch (error) {\r\n            if (error) throw error;\r\n          }\r\n        }}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <Field type=\"email\" name=\"email\" />\r\n\r\n            <ErrorMessage name=\"email\" component=\"div\" />\r\n\r\n            <Field type=\"password\" name=\"password\" />\r\n\r\n            <ErrorMessage name=\"password\" component=\"div\" />\r\n\r\n            <button type=\"submit\" disabled={isSubmitting}>\r\n              Submit\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RegisterForm;\r\n","import React from 'react';\r\nimport RegisterForm from '../components/RegisterForm';\r\n\r\nfunction Register({ setUser }) {\r\n  return <RegisterForm setUser={setUser} />;\r\n}\r\nexport default Register;\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport Home from './pages/Home';\r\nimport Register from './pages/Register';\r\n\r\nfunction App() {\r\n  const [user, setUser] = useState(null);\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/\">Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/register\">Register</Link>\r\n            </li>\r\n            {user && <span>Welcome{user.email}</span>}\r\n          </ul>\r\n        </nav>\r\n        <Switch>\r\n          <Route path=\"/register\">\r\n            <Register setUser={setUser} />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}